{"version":3,"file":"index.mjs","sources":["../src/src/utils.ts","../src/src/latex.ts","../src/src/transformer.ts","../src/src/plugin.ts"],"sourcesContent":["/**\n * @internal\n */\nexport const unreachable = (_: never): never => {\n  throw new Error(\"unreachable\");\n};\n\n/**\n * @internal\n */\nexport function invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n","import {\n  MathRun,\n  MathSuperScript,\n  MathSubScript,\n  MathRadical,\n  MathFraction,\n  MathSum,\n} from \"docx\";\nimport { parseMath } from \"@unified-latex/unified-latex-util-parse\";\nimport type * as latex from \"@unified-latex/unified-latex-types\";\nimport { unreachable } from \"./utils\";\n\nconst hasSquareBrackets = (\n  arg: latex.Argument | undefined\n): arg is latex.Argument => {\n  return !!arg && arg.openMark === \"[\" && arg.closeMark === \"]\";\n};\nconst hasCurlyBrackets = (\n  arg: latex.Argument | undefined\n): arg is latex.Argument => {\n  return !!arg && arg.openMark === \"{\" && arg.closeMark === \"}\";\n};\n\nconst mapString = (s: string): MathRun => new MathRun(s);\n\nconst mapMacro = (n: latex.Macro, runs: MathRun[]): MathRun | false => {\n  switch (n.content) {\n    case \"#\":\n      return mapString(\"#\");\n    case \"$\":\n      return mapString(\"$\");\n    case \"%\":\n      return mapString(\"%\");\n    case \"&\":\n      return mapString(\"&\");\n    case \"textasciitilde\":\n      return mapString(\"~\");\n    case \"textasciicircum\":\n      return mapString(\"^\");\n    case \"textbackslash\":\n      return mapString(\"∖\");\n    case \"{\":\n      return mapString(\"{\");\n    case \"}\":\n      return mapString(\"}\");\n    case \"textbar\":\n      return mapString(\"|\");\n    case \"textless\":\n      return mapString(\"<\");\n    case \"textgreater\":\n      return mapString(\">\");\n    case \"neq\":\n      return mapString(\"≠\");\n    case \"sim\":\n      return mapString(\"∼\");\n    case \"simeq\":\n      return mapString(\"≃\");\n    case \"approx\":\n      return mapString(\"≈\");\n    case \"fallingdotseq\":\n      return mapString(\"≒\");\n    case \"risingdotseq\":\n      return mapString(\"≓\");\n    case \"equiv\":\n      return mapString(\"≡\");\n    case \"geq\":\n      return mapString(\"≥\");\n    case \"geqq\":\n      return mapString(\"≧\");\n    case \"leq\":\n      return mapString(\"≤\");\n    case \"leqq\":\n      return mapString(\"≦\");\n    case \"gg\":\n      return mapString(\"≫\");\n    case \"ll\":\n      return mapString(\"≪\");\n    case \"times\":\n      return mapString(\"×\");\n    case \"div\":\n      return mapString(\"÷\");\n    case \"pm\":\n      return mapString(\"±\");\n    case \"mp\":\n      return mapString(\"∓\");\n    case \"oplus\":\n      return mapString(\"⊕\");\n    case \"ominus\":\n      return mapString(\"⊖\");\n    case \"otimes\":\n      return mapString(\"⊗\");\n    case \"oslash\":\n      return mapString(\"⊘\");\n    case \"circ\":\n      return mapString(\"∘\");\n    case \"cdot\":\n      return mapString(\"⋅\");\n    case \"bullet\":\n      return mapString(\"∙\");\n    case \"ltimes\":\n      return mapString(\"⋉\");\n    case \"rtimes\":\n      return mapString(\"⋊\");\n    case \"in\":\n      return mapString(\"∈\");\n    case \"ni\":\n      return mapString(\"∋\");\n    case \"notin\":\n      return mapString(\"∉\");\n    case \"subset\":\n      return mapString(\"⊂\");\n    case \"supset\":\n      return mapString(\"⊃\");\n    case \"subseteq\":\n      return mapString(\"⊆\");\n    case \"supseteq\":\n      return mapString(\"⊇\");\n    case \"nsubseteq\":\n      return mapString(\"⊈\");\n    case \"nsupseteq\":\n      return mapString(\"⊉\");\n    case \"subsetneq\":\n      return mapString(\"⊊\");\n    case \"supsetneq\":\n      return mapString(\"⊋\");\n    case \"cap\":\n      return mapString(\"∩\");\n    case \"cup\":\n      return mapString(\"∪\");\n    case \"emptyset\":\n      return mapString(\"∅\");\n    case \"infty\":\n      return mapString(\"∞\");\n    case \"partial\":\n      return mapString(\"∂\");\n    case \"aleph\":\n      return mapString(\"ℵ\");\n    case \"hbar\":\n      return mapString(\"ℏ\");\n    case \"wp\":\n      return mapString(\"℘\");\n    case \"Re\":\n      return mapString(\"ℜ\");\n    case \"Im\":\n      return mapString(\"ℑ\");\n    case \"alpha\":\n      return mapString(\"α\");\n    case \"beta\":\n      return mapString(\"β\");\n    case \"gamma\":\n      return mapString(\"γ\");\n    case \"delta\":\n      return mapString(\"δ\");\n    case \"epsilon\":\n      return mapString(\"ϵ\");\n    case \"zeta\":\n      return mapString(\"ζ\");\n    case \"eta\":\n      return mapString(\"η\");\n    case \"theta\":\n      return mapString(\"θ\");\n    case \"iota\":\n      return mapString(\"ι\");\n    case \"kappa\":\n      return mapString(\"κ\");\n    case \"lambda\":\n      return mapString(\"λ\");\n    case \"eta\":\n      return mapString(\"η\");\n    case \"mu\":\n      return mapString(\"μ\");\n    case \"nu\":\n      return mapString(\"ν\");\n    case \"xi\":\n      return mapString(\"ξ\");\n    case \"pi\":\n      return mapString(\"π\");\n    case \"rho\":\n      return mapString(\"ρ\");\n    case \"sigma\":\n      return mapString(\"σ\");\n    case \"tau\":\n      return mapString(\"τ\");\n    case \"upsilon\":\n      return mapString(\"υ\");\n    case \"phi\":\n      return mapString(\"ϕ\");\n    case \"chi\":\n      return mapString(\"χ\");\n    case \"psi\":\n      return mapString(\"ψ\");\n    case \"omega\":\n      return mapString(\"ω\");\n    case \"varepsilon\":\n      return mapString(\"ε\");\n    case \"vartheta\":\n      return mapString(\"ϑ\");\n    case \"varrho\":\n      return mapString(\"ϱ\");\n    case \"varsigma\":\n      return mapString(\"ς\");\n    case \"varphi\":\n      return mapString(\"φ\");\n    case \"Gamma\":\n      return mapString(\"Γ\");\n    case \"Delta\":\n      return mapString(\"Δ\");\n    case \"Theta\":\n      return mapString(\"Θ\");\n    case \"Lambda\":\n      return mapString(\"Λ\");\n    case \"Xi\":\n      return mapString(\"Ξ\");\n    case \"Pi\":\n      return mapString(\"Π\");\n    case \"Sigma\":\n      return mapString(\"Σ\");\n    case \"Upsilon\":\n      return mapString(\"Υ\");\n    case \"Phi\":\n      return mapString(\"Φ\");\n    case \"Psi\":\n      return mapString(\"Ψ\");\n    case \"Omega\":\n      return mapString(\"Ω\");\n    case \"newline\":\n    case \"\\\\\":\n      // line break\n      return false;\n    case \"^\": {\n      const prev = runs.pop();\n      if (!prev) break;\n      return new MathSuperScript({\n        children: [prev],\n        superScript: mapGroup(n.args?.[0]?.content ?? []),\n      });\n    }\n    case \"_\": {\n      const prev = runs.pop();\n      if (!prev) break;\n      return new MathSubScript({\n        children: [prev],\n        subScript: mapGroup(n.args?.[0]?.content ?? []),\n      });\n    }\n    case \"hat\":\n      // TODO: implement\n      break;\n    case \"widehat\":\n      // TODO: implement\n      break;\n    case \"sum\": {\n      // TODO: support superscript and subscript\n      return new MathSum({\n        children: [],\n      });\n    }\n    case \"int\":\n      return mapString(\"∫\");\n    case \"frac\":\n    case \"tfrac\":\n    case \"dfrac\": {\n      const args = n.args ?? [];\n      if (\n        args.length === 2 &&\n        hasCurlyBrackets(args[0]) &&\n        hasCurlyBrackets(args[1])\n      ) {\n        return new MathFraction({\n          numerator: mapGroup(args[0].content),\n          denominator: mapGroup(args[1].content),\n        });\n      }\n      break;\n    }\n    case \"sqrt\": {\n      const args = n.args ?? [];\n      if (args.length === 1 && hasCurlyBrackets(args[0])) {\n        return new MathRadical({\n          children: mapGroup(args[0].content),\n        });\n      }\n      if (\n        args.length === 2 &&\n        hasSquareBrackets(args[0]) &&\n        hasCurlyBrackets(args[1])\n      ) {\n        return new MathRadical({\n          children: mapGroup(args[1].content),\n          degree: mapGroup(args[0].content),\n        });\n      }\n      break;\n    }\n    default:\n      break;\n  }\n  return mapString(n.content);\n};\n\nconst mapGroup = (nodes: latex.Node[]): MathRun[] => {\n  const group: MathRun[] = [];\n  for (const c of nodes) {\n    group.push(...(mapNode(c, group) || []));\n  }\n  return group;\n};\n\nconst mapNode = (n: latex.Node, runs: MathRun[]): MathRun[] | false => {\n  switch (n.type) {\n    case \"root\":\n      break;\n    case \"string\":\n      return [mapString(n.content)];\n    case \"whitespace\":\n      break;\n    case \"parbreak\":\n      break;\n    case \"comment\":\n      break;\n    case \"macro\":\n      const run = mapMacro(n, runs);\n      if (!run) {\n        // line break\n        return false;\n      } else {\n        return [run];\n      }\n    case \"environment\":\n    case \"mathenv\":\n      break;\n    case \"verbatim\":\n      break;\n    case \"inlinemath\":\n      break;\n    case \"displaymath\":\n      break;\n    case \"group\":\n      return mapGroup(n.content);\n    case \"verb\":\n      break;\n    default:\n      unreachable(n);\n  }\n\n  return [];\n};\n\n/**\n * @internal\n */\nexport const parseLatex = (value: string): MathRun[][] => {\n  const parsed = parseMath(value);\n  const paragraphs: MathRun[][] = [[]];\n  let runs: MathRun[] = paragraphs[0]!;\n  for (const n of parsed) {\n    const res = mapNode(n, runs);\n    if (!res) {\n      // line break\n      paragraphs.push((runs = []));\n    } else {\n      runs.push(...res);\n    }\n  }\n  return paragraphs;\n};\n","import {\n  convertInchesToTwip,\n  Packer,\n  Document,\n  Paragraph,\n  ParagraphChild,\n  Table,\n  TableRow,\n  TableCell,\n  TableOfContents,\n  TextRun,\n  ImageRun,\n  ExternalHyperlink,\n  Math,\n  HeadingLevel,\n  LevelFormat,\n  AlignmentType,\n  IImageOptions,\n  ILevelsOptions,\n  FootnoteReferenceRun,\n  CheckBox,\n  WidthType,\n} from \"docx\";\nimport type { IPropertiesOptions } from \"docx/build/file/core-properties\";\nimport type * as mdast from \"./models/mdast\";\nimport { parseLatex } from \"./latex\";\nimport { invariant, unreachable } from \"./utils\";\n\nconst ORDERED_LIST_REF = \"ordered\";\nconst INDENT = 0.5;\nconst DEFAULT_NUMBERINGS: ILevelsOptions[] = [\n  {\n    level: 0,\n    format: LevelFormat.DECIMAL,\n    text: \"%1.\",\n    alignment: AlignmentType.START,\n  },\n  {\n    level: 1,\n    format: LevelFormat.DECIMAL,\n    text: \"%2.\",\n    alignment: AlignmentType.START,\n    style: {\n      paragraph: {\n        indent: { start: convertInchesToTwip(INDENT * 1) },\n      },\n    },\n  },\n  {\n    level: 2,\n    format: LevelFormat.DECIMAL,\n    text: \"%3.\",\n    alignment: AlignmentType.START,\n    style: {\n      paragraph: {\n        indent: { start: convertInchesToTwip(INDENT * 2) },\n      },\n    },\n  },\n  {\n    level: 3,\n    format: LevelFormat.DECIMAL,\n    text: \"%4.\",\n    alignment: AlignmentType.START,\n    style: {\n      paragraph: {\n        indent: { start: convertInchesToTwip(INDENT * 3) },\n      },\n    },\n  },\n  {\n    level: 4,\n    format: LevelFormat.DECIMAL,\n    text: \"%5.\",\n    alignment: AlignmentType.START,\n    style: {\n      paragraph: {\n        indent: { start: convertInchesToTwip(INDENT * 4) },\n      },\n    },\n  },\n  {\n    level: 5,\n    format: LevelFormat.DECIMAL,\n    text: \"%6.\",\n    alignment: AlignmentType.START,\n    style: {\n      paragraph: {\n        indent: { start: convertInchesToTwip(INDENT * 5) },\n      },\n    },\n  },\n];\n\nexport type ImageDataMap = { [url: string]: ImageData };\n\nexport type ImageData = {\n  image: IImageOptions[\"data\"];\n  width: number;\n  height: number;\n};\n\nexport type ImageResolver = (url: string) => Promise<ImageData> | ImageData;\n\ntype Decoration = Readonly<{\n  [key in (mdast.Emphasis | mdast.Strong | mdast.Delete)[\"type\"]]?: true;\n}>;\n\ntype ListInfo = Readonly<{\n  level: number;\n  ordered: boolean;\n  checked?: boolean;\n}>;\n\ntype Context = Readonly<{\n  deco: Decoration;\n  images: ImageDataMap;\n  indent: number;\n  list?: ListInfo;\n}>;\n\nexport interface DocxOptions\n  extends Pick<\n    IPropertiesOptions,\n    | \"title\"\n    | \"subject\"\n    | \"creator\"\n    | \"keywords\"\n    | \"description\"\n    | \"lastModifiedBy\"\n    | \"revision\"\n    | \"styles\"\n    | \"background\"\n  > {\n  /**\n   * Set output type of `VFile.result`. `buffer` is `Promise<Buffer>`. `blob` is `Promise<Blob>`.\n   */\n  output?: \"buffer\" | \"blob\";\n  /**\n   * **You must set** if your markdown includes images. See example for [browser](https://github.com/inokawa/remark-docx/blob/main/stories/playground.stories.tsx) and [Node.js](https://github.com/inokawa/remark-docx/blob/main/src/index.spec.ts).\n   */\n  imageResolver?: ImageResolver;\n}\n\ntype DocxChild = Paragraph | Table | TableOfContents;\ntype DocxContent = DocxChild | ParagraphChild;\n\nexport interface Footnotes {\n  [key: string]: { children: Paragraph[] };\n}\n\n// type to define the return value of `convertNodes`\nexport interface ConvertNodesReturn {\n  nodes: DocxContent[];\n  footnotes: Footnotes;\n}\n\nexport const mdastToDocx = async (\n  node: mdast.Root,\n  {\n    output = \"buffer\",\n    title,\n    subject,\n    creator,\n    keywords,\n    description,\n    lastModifiedBy,\n    revision,\n    styles,\n    background,\n  }: DocxOptions,\n  images: ImageDataMap\n): Promise<any> => {\n  const { nodes, footnotes } = convertNodes(node.children, {\n    deco: {},\n    images,\n    indent: 0,\n  });\n  const doc = new Document({\n    title,\n    subject,\n    creator,\n    keywords,\n    description,\n    lastModifiedBy,\n    revision,\n    styles,\n    background,\n    footnotes,\n    sections: [{ children: nodes as DocxChild[] }],\n    numbering: {\n      config: [\n        {\n          reference: ORDERED_LIST_REF,\n          levels: DEFAULT_NUMBERINGS,\n        },\n      ],\n    },\n  });\n\n  switch (output) {\n    case \"buffer\":\n      const bufOut = await Packer.toBuffer(doc);\n      // feature detection instead of environment detection, but if Buffer exists\n      // it's probably Node. If not, return the Uint8Array that JSZip returns\n      // when it doesn't detect a Node environment.\n      return typeof Buffer === \"function\" ? Buffer.from(bufOut) : bufOut;\n    case \"blob\":\n      return Packer.toBlob(doc);\n  }\n};\n\nconst convertNodes = (\n  nodes: mdast.Content[],\n  ctx: Context\n): ConvertNodesReturn => {\n  const results: DocxContent[] = [];\n  let footnotes: Footnotes = {};\n  for (const node of nodes) {\n    switch (node.type) {\n      case \"paragraph\":\n        results.push(buildParagraph(node, ctx));\n        break;\n      case \"heading\":\n        results.push(buildHeading(node, ctx));\n        break;\n      case \"thematicBreak\":\n        results.push(buildThematicBreak(node));\n        break;\n      case \"blockquote\":\n        results.push(...buildBlockquote(node, ctx));\n        break;\n      case \"list\":\n        results.push(...buildList(node, ctx));\n        break;\n      case \"listItem\":\n        invariant(false, \"unreachable\");\n      case \"table\":\n        results.push(buildTable(node, ctx));\n        break;\n      case \"tableRow\":\n        invariant(false, \"unreachable\");\n      case \"tableCell\":\n        invariant(false, \"unreachable\");\n      case \"html\":\n        results.push(buildHtml(node));\n        break;\n      case \"code\":\n        results.push(buildCode(node));\n        break;\n      case \"yaml\":\n        // FIXME: unimplemented\n        break;\n      case \"toml\":\n        // FIXME: unimplemented\n        break;\n      case \"definition\":\n        // FIXME: unimplemented\n        break;\n      case \"footnoteDefinition\":\n        footnotes[node.identifier] = buildFootnoteDefinition(node, ctx);\n        break;\n      case \"text\":\n        results.push(buildText(node.value, ctx.deco));\n        break;\n      case \"emphasis\":\n      case \"strong\":\n      case \"delete\": {\n        const { type, children } = node;\n        const { nodes } = convertNodes(children, {\n          ...ctx,\n          deco: { ...ctx.deco, [type]: true },\n        });\n        results.push(...nodes);\n        break;\n      }\n      case \"inlineCode\":\n        // FIXME: transform to text for now\n        results.push(buildText(node.value, ctx.deco));\n        break;\n      case \"break\":\n        results.push(buildBreak(node));\n        break;\n      case \"link\":\n        results.push(buildLink(node, ctx));\n        break;\n      case \"image\":\n        results.push(buildImage(node, ctx.images));\n        break;\n      case \"linkReference\":\n        // FIXME: unimplemented\n        break;\n      case \"imageReference\":\n        // FIXME: unimplemented\n        break;\n      case \"footnote\":\n        results.push(buildFootnote(node, ctx));\n        break;\n      case \"footnoteReference\":\n        // do we need context here?\n        results.push(buildFootnoteReference(node));\n        break;\n      case \"math\":\n        results.push(...buildMath(node));\n        break;\n      case \"inlineMath\":\n        results.push(buildInlineMath(node));\n        break;\n      default:\n        unreachable(node);\n        break;\n    }\n  }\n  return {\n    nodes: results,\n    footnotes,\n  };\n};\n\nconst buildParagraph = ({ children }: mdast.Paragraph, ctx: Context) => {\n  const list = ctx.list;\n  const { nodes } = convertNodes(children, ctx);\n\n  if (list && list.checked != null) {\n    nodes.unshift(\n      new CheckBox({\n        checked: list.checked,\n        checkedState: { value: \"2611\" },\n        uncheckedState: { value: \"2610\" },\n      })\n    );\n  }\n  return new Paragraph({\n    children: nodes,\n    indent:\n      ctx.indent > 0\n        ? {\n            start: convertInchesToTwip(INDENT * ctx.indent),\n          }\n        : undefined,\n    ...(list &&\n      (list.ordered\n        ? {\n            numbering: {\n              reference: ORDERED_LIST_REF,\n              level: list.level,\n            },\n          }\n        : {\n            bullet: {\n              level: list.level,\n            },\n          })),\n  });\n};\n\nconst buildHeading = ({ children, depth }: mdast.Heading, ctx: Context) => {\n  let heading: HeadingLevel;\n  switch (depth) {\n    case 1:\n      heading = HeadingLevel.TITLE;\n      break;\n    case 2:\n      heading = HeadingLevel.HEADING_1;\n      break;\n    case 3:\n      heading = HeadingLevel.HEADING_2;\n      break;\n    case 4:\n      heading = HeadingLevel.HEADING_3;\n      break;\n    case 5:\n      heading = HeadingLevel.HEADING_4;\n      break;\n    case 6:\n      heading = HeadingLevel.HEADING_5;\n      break;\n  }\n  const { nodes } = convertNodes(children, ctx);\n  return new Paragraph({\n    heading,\n    children: nodes,\n  });\n};\n\nconst buildThematicBreak = (_: mdast.ThematicBreak) => {\n  return new Paragraph({\n    thematicBreak: true,\n  });\n};\n\nconst buildBlockquote = ({ children }: mdast.Blockquote, ctx: Context) => {\n  const { nodes } = convertNodes(children, { ...ctx, indent: ctx.indent + 1 });\n  return nodes;\n};\n\nconst buildList = (\n  { children, ordered, start: _start, spread: _spread }: mdast.List,\n  ctx: Context\n) => {\n  const list: ListInfo = {\n    level: ctx.list ? ctx.list.level + 1 : 0,\n    ordered: !!ordered,\n  };\n  return children.flatMap((item) => {\n    return buildListItem(item, {\n      ...ctx,\n      list,\n    });\n  });\n};\n\nconst buildListItem = (\n  { children, checked, spread: _spread }: mdast.ListItem,\n  ctx: Context\n) => {\n  const { nodes } = convertNodes(children, {\n    ...ctx,\n    ...(ctx.list && { list: { ...ctx.list, checked: checked ?? undefined } }),\n  });\n  return nodes;\n};\n\nconst buildTable = ({ children, align }: mdast.Table, ctx: Context) => {\n  const cellAligns: AlignmentType[] | undefined = align?.map((a) => {\n    switch (a) {\n      case \"left\":\n        return AlignmentType.LEFT;\n      case \"right\":\n        return AlignmentType.RIGHT;\n      case \"center\":\n        return AlignmentType.CENTER;\n      default:\n        return AlignmentType.LEFT;\n    }\n  });\n\n  return new Table({\n    width: {\n      size: 100,\n      type: WidthType.PERCENTAGE,\n    },\n    rows: children.map((r) => {\n      return buildTableRow(r, ctx, cellAligns);\n    }),\n  });\n};\n\nconst buildTableRow = (\n  { children }: mdast.TableRow,\n  ctx: Context,\n  cellAligns: AlignmentType[] | undefined\n) => {\n  return new TableRow({\n    children: children.map((c, i) => {\n      return buildTableCell(c, ctx, cellAligns?.[i]);\n    }),\n  });\n};\n\nconst buildTableCell = (\n  { children }: mdast.TableCell,\n  ctx: Context,\n  align: AlignmentType | undefined\n) => {\n  const { nodes } = convertNodes(children, ctx);\n  return new TableCell({\n    children: [\n      new Paragraph({\n        alignment: align,\n        children: nodes,\n      }),\n    ],\n  });\n};\n\nconst buildHtml = ({ value }: mdast.HTML) => {\n  // FIXME: transform to text for now\n  return new Paragraph({\n    children: [buildText(value, {})],\n  });\n};\n\nconst buildCode = ({ value, lang: _lang, meta: _meta }: mdast.Code) => {\n  // FIXME: transform to text for now\n  return new Paragraph({\n    children: [buildText(value, {})],\n  });\n};\n\nconst buildMath = ({ value }: mdast.Math) => {\n  return parseLatex(value).map(\n    (runs) =>\n      new Paragraph({\n        children: [\n          new Math({\n            children: runs,\n          }),\n        ],\n      })\n  );\n};\n\nconst buildInlineMath = ({ value }: mdast.InlineMath) => {\n  return new Math({\n    children: parseLatex(value).flatMap((runs) => runs),\n  });\n};\n\nconst buildText = (text: string, deco: Decoration) => {\n  return new TextRun({\n    text,\n    bold: deco.strong,\n    italics: deco.emphasis,\n    strike: deco.delete,\n  });\n};\n\nconst buildBreak = (_: mdast.Break) => {\n  return new TextRun({ text: \"\", break: 1 });\n};\n\nconst buildLink = (\n  { children, url, title: _title }: mdast.Link,\n  ctx: Context\n) => {\n  const { nodes } = convertNodes(children, ctx);\n  return new ExternalHyperlink({\n    link: url,\n    children: nodes,\n  });\n};\n\nconst buildImage = (\n  { url, title: _title, alt: _alt }: mdast.Image,\n  images: ImageDataMap\n) => {\n  const img = images[url];\n  invariant(img, `Fetch image was failed: ${url}`);\n\n  const { image, width, height } = img;\n  return new ImageRun({\n    data: image,\n    transformation: {\n      width,\n      height,\n    },\n  });\n};\n\nconst buildFootnote = ({ children }: mdast.Footnote, ctx: Context) => {\n  // FIXME: transform to paragraph for now\n  const { nodes } = convertNodes(children, ctx);\n  return new Paragraph({\n    children: nodes,\n  });\n};\n\nconst buildFootnoteDefinition = (\n  { children }: mdast.FootnoteDefinition,\n  ctx: Context\n) => {\n  return {\n    children: children.map((node) => {\n      const { nodes } = convertNodes([node], ctx);\n      return nodes[0] as Paragraph;\n    }),\n  };\n};\n\nconst buildFootnoteReference = ({ identifier }: mdast.FootnoteReference) => {\n  // do we need Context?\n  return new FootnoteReferenceRun(parseInt(identifier));\n};\n","import type { Plugin } from \"unified\";\nimport type * as mdast from \"mdast\";\nimport { visit } from \"unist-util-visit\";\nimport { mdastToDocx, DocxOptions, ImageDataMap } from \"./transformer\";\nimport { invariant } from \"./utils\";\n\nexport type { DocxOptions };\n\nconst plugin: Plugin<[DocxOptions?]> = function (opts = {}) {\n  let images: ImageDataMap = {};\n\n  this.Compiler = (node) => {\n    return mdastToDocx(node as any, opts, images);\n  };\n\n  return async (node) => {\n    const imageList: mdast.Image[] = [];\n    visit(node, \"image\", (node) => {\n      imageList.push(node);\n    });\n    if (imageList.length === 0) {\n      return node;\n    }\n\n    const imageResolver = opts.imageResolver;\n    invariant(imageResolver, \"options.imageResolver is not defined.\");\n\n    const imageDatas = await Promise.all(\n      imageList.map(({ url }) => imageResolver(url))\n    );\n    images = imageList.reduce((acc, img, i) => {\n      acc[img.url] = imageDatas[i]!;\n      return acc;\n    }, {} as ImageDataMap);\n    return node;\n  };\n};\nexport default plugin;\n"],"names":[],"mappings":"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"}